{"version":3,"sources":["logo.svg","settings/Pagination.js","utils/index.js","pages/music/MusicList.jsx","pages/main/Main.jsx","App.js","serviceWorker.js","index.js","pages/music/MusicList.module.scss","pages/main/Main.module.scss"],"names":["module","exports","Pagination","defaultCurrent","defaultPageSize","hideOnSinglePage","current","pageSize","pageSizeOptions","showSizeChanger","showTotal","total","range","DownloadBlob","data","name","fileName","blob","Blob","objectUrl","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","Search","MusicList","state","musicList","loading","keyword","pagination","audio","getDuration","str","duration","moment","hour","hours","minute","minutes","second","seconds","toString","length","onSearch","setState","fetchMusicList","limit","offset","Axios","get","params","then","res","result","songs","songCount","fetchPlay","id","responseType","fetchDownload","columns","title","dataIndex","key","render","text","record","artists","album","type","onClick","className","style","search","input","this","table","dataSource","onChange","rowKey","player","src","controls","Component","Main","main","topBar","content","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd1e7095.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const Pagination = () => {\n    return {\n        defaultCurrent: 1,\n        defaultPageSize: 10,\n        hideOnSinglePage: false,\n        current: 1,\n        pageSize: 10,\n        pageSizeOptions: ['10', '20', '50', '100'],\n        showSizeChanger: true,\n        showTotal: function (total, range) {\n            return `共${total}条`;\n        },\n        total: 0\n    };\n};\n\nexport default Pagination;","const DownloadBlob = (data, name='') => {\n    let fileName = name || 'test';\n    let blob = new Blob([data.data]);\n    let objectUrl = URL.createObjectURL(blob);\n    let a = document.createElement('a');\n    a.href = objectUrl;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(objectUrl);\n};\n\nexport {\n    DownloadBlob\n}","import React, {Component} from 'react';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport Pagination from '@/settings/Pagination';\nimport { Button, Input, Table } from 'antd';\nimport { DownloadBlob } from \"@/utils\";\nimport style from './MusicList.module.scss';\n\nconst { Search } = Input;\n\nexport default class MusicList extends Component{\n    state = {\n        musicList: [],\n        loading: false,\n        keyword: '',\n        pagination: Pagination(),\n        audio: '',\n    };\n\n    getDuration = (str) => {\n        let duration = moment.duration(str);\n        let hour = duration.hours() > 1 ? duration.hours() + 'h' : '';\n        let minute = duration.minutes() + ':';\n        let second = duration.seconds().toString();\n        if (minute.length < 3){minute = '0' + minute}\n        if (second.length < 2){second = '0' + second}\n        return hour + minute + second;\n    };\n\n    onSearch = (keyword) => {\n        this.setState({keyword: keyword}, () => {\n            this.fetchMusicList();\n        })\n    }\n\n    fetchMusicList = () => {\n        const { pagination, keyword } = this.state;\n        let limit = pagination.pageSize;\n        let offset = (pagination.current - 1) * limit;\n        this.setState({loading: true})\n        Axios.get('http://localhost:3333/search', {params: {keyword: keyword, limit: limit, offset: offset}})\n            .then(res => {\n                this.setState({\n                    musicList: res.data.result.songs,\n                    pagination: {...this.state.pagination, total: res.data.result.songCount},\n                    loading: false,\n                })\n\n            })\n    };\n\n    fetchPlay = (id) => {\n        this.setState({loading: true})\n        Axios.get('http://localhost:3333/download', {\n            params: {id: id},\n            responseType: 'blob'\n        }).then(res => {\n            let blob = new Blob([res.data]);\n            let objectUrl = URL.createObjectURL(blob);\n            this.setState({audio: objectUrl, loading: false})\n        })\n    };\n\n    fetchDownload = (id, name) => {\n        this.setState({loading: true})\n        Axios.get('http://localhost:3333/download', {\n            params: {id: id},\n            responseType: 'blob'\n        }).then(res => {\n            this.setState({loading: false})\n            DownloadBlob(res, name+'.mp3');\n        })\n    };\n\n    render() {\n        const columns = [\n            {title: '标题', dataIndex: 'name', key: 'name'},\n            {title: '时长', dataIndex: 'duration', key: 'duration', render: (text) => (<div>{this.getDuration(text)}</div>)},\n            {title: '作者', dataIndex: 'artist', key: 'artist', render: (text, record) => (<div>{record.artists[0].name}</div>)},\n            {title: '专辑', dataIndex: 'album', key: 'album', render: (text, record) => (<div>《{record.album.name}》</div>)},\n            {title: '操作', dataIndex: 'id', key: 'action',\n                render: (text, record) => (\n                    <div>\n                        <Button type='link' onClick={()=>this.fetchPlay(record.id)}>播放</Button>\n                        <Button type='link' onClick={()=>this.fetchDownload(record.id, record.name)}>下载</Button>\n                    </div>\n                )},\n        ];\n        return (\n            <div className={style.musicList}>\n                <div className={style.search}>\n                    <Search className={style.input} onSearch={this.onSearch}/>\n                </div>\n                <div className={style.table}>\n                    <Table dataSource={this.state.musicList}\n                    loading={this.state.loading}\n                    pagination={this.state.pagination}\n                    onChange={(pagination) => {\n                        this.setState({\n                            pagination: {\n                                ...this.state.pagination, \n                                current: pagination.current, \n                                pageSize: pagination.pageSize\n                            }\n                        }, () => {this.fetchMusicList()})\n                    }}\n                    columns={columns} rowKey='id'/>\n                </div>\n                <div className={style.player}>\n                    <audio src={this.state.audio} type=\"audio/mpeg\" controls=\"controls\"></audio>\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport Axios from 'axios';\nimport MusicList from '@/pages/music/MusicList';\nimport style from './Main.module.scss';\n\nexport default class Main extends Component{\n    state = {\n    };\n\n    render() {\n        return (\n            <div className={style.main}>\n            \t<div className={style.topBar}></div>\n            \t<div className={style.content}>\n            \t\t<MusicList/>\n            \t</div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport Main from '@/pages/main/Main';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n            <Route exact path={['/']} component={Main}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"musicList\":\"MusicList_musicList__SVNzu\",\"search\":\"MusicList_search__Juv70\",\"input\":\"MusicList_input__1JSx6\",\"table\":\"MusicList_table__2k9Rl\",\"player\":\"MusicList_player__32hZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2eEIG\",\"topBar\":\"Main_topBar__1rJsz\",\"content\":\"Main_content__Gtd0O\"};"],"sourceRoot":""}